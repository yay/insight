plugins {
    id("org.jetbrains.kotlin.jvm") version "1.4.0"
}

group = 'com.vitalyk.insight'
version = '1.0-SNAPSHOT'
description = """"""

repositories {
    mavenCentral()
    jcenter()
}

jar {
    manifest {
        attributes 'Main-Class': 'com.vitalyk.insight.Insight'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will.
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

subprojects {
    apply plugin: 'kotlin'

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.0'
        implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.0'
    }
}

dependencies {
//    kapt project(":generator")
//    compileOnly project(":generator")

    // Add whatever jars are in lib folder as dependencies.
    implementation fileTree(dir: 'lib', include: ['*.jar'])

    implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.4.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.3.9'

    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
//    implementation 'com.h2database:h2:1.4.197'
//    implementation 'org.openjfx:javafx-controls:11.0.1'
    implementation 'no.tornado:tornadofx:1.7.20'

    implementation 'org.apache.commons:commons-csv:1.5' // CSV parser
    implementation 'org.jsoup:jsoup:1.13.1' // HTML parser

    implementation 'io.socket:socket.io-client:1.0.0'
    implementation 'org.json:json:20190722' // required by socket.io

    // JSON and XML parsers (until http://openjdk.java.net/jeps/198 maybe)
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.5'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.9.5'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.9.5'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    // https://github.com/FasterXML/jackson-modules-java8
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5' // Java 8 Date/Time
//    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.5' // Optional
//    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.5'

    // logback-classic implements the SLF4J API, allows to switch between logback, log4j, JUL
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'org.slf4j:jul-to-slf4j:1.7.30'
    implementation 'org.quartz-scheduler:quartz:2.3.2'
    implementation 'javax.mail:mail:1.4.7'

//    implementation 'org.jdbi:jdbi:2.78'
//    implementation 'org.postgresql:postgresql:42.0.0.jre7'
//    implementation 'io.grpc:grpc-netty:1.1.2'
//    implementation 'io.grpc:grpc-protobuf:1.1.2'
//    implementation 'io.grpc:grpc-stub:1.1.2'
//    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
//    implementation 'com.google.inject:guice:4.1.0'
//    implementation 'org.liquibase:liquibase-core:3.5.3'

    testImplementation(
            // This dependency provides the public API for writing tests and extensions.
            'org.junit.jupiter:junit-jupiter-api:5.1.1'
    )
    testRuntimeOnly (
            // Use the test engine of JUnit 5 for running tests.
            'org.junit.jupiter:junit-jupiter-engine:5.1.1',
            // Provides a public API for configuring and launching tests.
            // This API is typically used by IDEs and build tools.
            'org.junit.platform:junit-platform-launcher:1.1.1'
    )
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
//        freeCompilerArgs = ['-Xno-param-assertions']
        freeCompilerArgs = ['-progressive']
        jvmTarget = '1.8'
        apiVersion = '1.4'
        languageVersion = '1.4'
    }
}