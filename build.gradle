// https://kotlinlang.org/docs/reference/using-gradle.html

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

buildscript {
    ext.kotlin_version = '1.2.21'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

subprojects {
    apply plugin: 'kotlin'

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        compile "org.jetbrains.kotlin:kotlin-reflect"
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.vitalyk.insight.main.MainKt'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will.
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

junitPlatform {
    // platformVersion '1.0.2' // optional, defaults to plugin version
    logManager 'org.apache.logging.log4j.jul.LogManager'
    reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
}

group = 'com.vitalyk.insight'
version = '1.0-SNAPSHOT'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
     maven { url "http://jcenter.bintray.com" }
     maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
     maven { url "http://dl.bintray.com/kotlin/kotlin-eap-1.2" }
     maven { url "https://maven.oracle.com" }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.2.21'
    compile 'org.jetbrains.kotlin:kotlin-reflect:1.2.21'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.22.3'
    compile 'org.jetbrains.kotlinx:kotlinx-coroutines-javafx:0.22.3'

    compile project(':kubed-core')
    compile project(':kubed-geo')
    compile project(':kubed-demos')

    // Until Java 9 HTTP client: http://www.baeldung.com/java-9-http-client
    compile 'com.squareup.okhttp3:okhttp:3.9.1'
    compile 'no.tornado:tornadofx:1.7.15'
    compile 'org.apache.commons:commons-csv:1.5' // CSV parser
    compile 'org.jsoup:jsoup:1.11.2' // HTML parser

    compile 'org.json:json:20180130'
    compile 'io.socket:socket.io-client:1.0.0'
    // JSON and XML parsers (until http://openjdk.java.net/jeps/198 maybe)
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.9'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.8.9'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.4.1'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.9'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.quartz-scheduler:quartz:2.3.0'
    compile 'javax.mail:mail:1.4.7'

//    compile 'org.jdbi:jdbi:2.78'
//    compile 'org.postgresql:postgresql:42.0.0.jre7'
//    compile 'io.grpc:grpc-netty:1.1.2'
//    compile 'io.grpc:grpc-protobuf:1.1.2'
//    compile 'io.grpc:grpc-stub:1.1.2'
//    compile 'com.squareup.retrofit2:retrofit:2.2.0'
//    compile 'com.google.inject:guice:4.1.0'
//    compile 'org.liquibase:liquibase-core:3.5.3'

    testCompile(
            // This dependency provides the public API for writing tests and extensions.
            'org.junit.jupiter:junit-jupiter-api:5.0.2'
    )
    testRuntime (
            // Use the test engine of JUnit 5 for running tests.
            'org.junit.jupiter:junit-jupiter-engine:5.0.2',
            // Provides a public API for configuring and launching tests.
            // This API is typically used by IDEs and build tools.
            'org.junit.platform:junit-platform-launcher:1.0.2'
    )
}

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin/'
    test.kotlin.srcDirs += 'src/test/kotlin/'
}

kotlin {
    experimental {
        coroutines 'enable'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
//        freeCompilerArgs = ['-Xno-param-assertions']
        jvmTarget = '1.8'
        apiVersion = '1.2'
        languageVersion = '1.2'
    }
}